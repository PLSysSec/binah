instance PersistField User where
      toPersistValue
        = \ ent_a9qG
            -> (PersistMap
                  $ (zip ((Prelude.map Data.Text.pack) ["name", "friend", "ssn"]))
                      (Prelude.map toPersistValue $ toPersistFields ent_a9qG))
      fromPersistValue
        = ((\ x_a9qH
              -> let columns_a9qI = Data.HashMap.Strict.fromList x_a9qH
                 in
                   (fromPersistValues
                      $ (Prelude.map
                           (\ name_a9qJ
                              -> case
                                     (unordered-containers-0.2.9.0:Data.HashMap.Base.lookup
                                        (Data.Text.pack name_a9qJ))
                                       columns_a9qI
                                 of
                                   Just v_a9qK -> v_a9qK
                                   Nothing -> PersistNull)
                           $ ["name", "friend", "ssn"])))
             Control.Monad.<=< getPersistMap)
    instance PersistFieldSql User where
      sqlType _ = SqlString
    data User
      = User {userName :: !String,
              userFriend :: !(Key User),
              userSsn :: !Int}
      deriving Show
    type UserId = Key User
    instance PersistEntity User where
      type PersistEntityBackend User = SqlBackend
      data Unique User
      newtype Key User
        = UserKey {unUserKey :: (BackendKey SqlBackend)}
        deriving (Show,
                  Read,
                  Eq,
                  Ord,
                  Web.PathPieces.PathPiece,
                  Web.Internal.HttpApiData.ToHttpApiData,
                  Web.Internal.HttpApiData.FromHttpApiData,
                  PersistField,
                  PersistFieldSql,
                  ToJSON,
                  FromJSON)
      data EntityField User typ
        = typ ~ Key User => UserId |
          typ ~ String => UserName |
          typ ~ Key User => UserFriend |
          typ ~ Int => UserSsn
      keyToValues = ((: []) . (toPersistValue . unUserKey))
      keyFromValues
        = (fmap UserKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      entityDef _
        = (((((((((EntityDef (HaskellName (packPTH "User")))
                    (DBName (packPTH "user")))
                   (((((((FieldDef (HaskellName (packPTH "Id")))
                           (DBName (packPTH "id")))
                          ((FTTypeCon Nothing) (packPTH "UserId")))
                         SqlInt64)
                        [])
                       True)
                      ((ForeignRef (HaskellName (packPTH "User")))
                         ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))))
                  [])
                 [((((((FieldDef (HaskellName (packPTH "name")))
                         (DBName (packPTH "name")))
                        ((FTTypeCon Nothing) (packPTH "String")))
                       SqlString)
                      [])
                     True)
                    NoReference,
                  ((((((FieldDef (HaskellName (packPTH "friend")))
                         (DBName (packPTH "friend")))
                        ((FTTypeCon Nothing) (packPTH "UserId")))
                       (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                      [])
                     True)
                    ((ForeignRef (HaskellName (packPTH "User")))
                       ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64"))),
                  ((((((FieldDef (HaskellName (packPTH "ssn")))
                         (DBName (packPTH "ssn")))
                        ((FTTypeCon Nothing) (packPTH "Int")))
                       SqlInt64)
                      [])
                     True)
                    NoReference])
                [])
               [])
              [packPTH "Show"])
             (Data.Map.Internal.fromList []))
            False
      toPersistFields (User x_a9qL x_a9qM x_a9qN)
        = [SomePersistField x_a9qL, SomePersistField x_a9qM,
           SomePersistField x_a9qN]
      fromPersistValues [x1_a9qP, x2_a9qQ, x3_a9qR]
        = User
            <$>
              (Database.Persist.TH.mapLeft
                 (Database.Persist.TH.fieldError (packPTH "name"))
                 . fromPersistValue)
                x1_a9qP
            <*>
              (Database.Persist.TH.mapLeft
                 (Database.Persist.TH.fieldError (packPTH "friend"))
                 . fromPersistValue)
                x2_a9qQ
            <*>
              (Database.Persist.TH.mapLeft
                 (Database.Persist.TH.fieldError (packPTH "ssn"))
                 . fromPersistValue)
                x3_a9qR
      fromPersistValues x_a9qO
        = (Left
             $ (mappend (packPTH "User: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a9qO))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (User _name_a9qS _friend_a9qT _ssn_a9qU) = []
      persistFieldDef UserId
        = ((((((FieldDef (HaskellName (packPTH "Id")))
                 (DBName (packPTH "id")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserName
        = ((((((FieldDef (HaskellName (packPTH "name")))
                 (DBName (packPTH "name")))
                ((FTTypeCon Nothing) (packPTH "String")))
               SqlString)
              [])
             True)
            NoReference
      persistFieldDef UserFriend
        = ((((((FieldDef (HaskellName (packPTH "friend")))
                 (DBName (packPTH "friend")))
                ((FTTypeCon Nothing) (packPTH "UserId")))
               SqlInt64)
              [])
             True)
            ((ForeignRef (HaskellName (packPTH "User")))
               ((FTTypeCon (Just (packPTH "Data.Int"))) (packPTH "Int64")))
      persistFieldDef UserSsn
        = ((((((FieldDef (HaskellName (packPTH "ssn")))
                 (DBName (packPTH "ssn")))
                ((FTTypeCon Nothing) (packPTH "Int")))
               SqlInt64)
              [])
             True)
            NoReference
      persistIdField = UserId
      fieldLens UserId
        = (lensPTH
             persistent-2.9.2:Database.Persist.Class.PersistEntity.entityKey)
            (\ (Entity _ value_a9qV) key_a9qW -> (Entity key_a9qW) value_a9qV)
      fieldLens UserName
        = (lensPTH
             (userName
                . persistent-2.9.2:Database.Persist.Class.PersistEntity.entityVal))
            (\ (Entity key_a9qX value_a9qY) x_a9qZ
               -> (Entity key_a9qX) value_a9qY {userName = x_a9qZ})
      fieldLens UserFriend
        = (lensPTH
             (userFriend
                . persistent-2.9.2:Database.Persist.Class.PersistEntity.entityVal))
            (\ (Entity key_a9qX value_a9qY) x_a9qZ
               -> (Entity key_a9qX) value_a9qY {userFriend = x_a9qZ})
      fieldLens UserSsn
        = (lensPTH
             (userSsn
                . persistent-2.9.2:Database.Persist.Class.PersistEntity.entityVal))
            (\ (Entity key_a9qX value_a9qY) x_a9qZ
               -> (Entity key_a9qX) value_a9qY {userSsn = x_a9qZ})
    instance ToBackendKey SqlBackend User where
      toBackendKey = unUserKey
      fromBackendKey = UserKey