{-# LANGUAGE GADTs, TypeFamilies, GeneralizedNewtypeDeriving, OverloadedStrings, TemplateHaskell, QuasiQuotes, MultiParamTypeClasses #-}

{-@ LIQUID "--no-adt"                   @-}
{-@ LIQUID "--exact-data-cons"           @-}
{-@ LIQUID "--higherorder"              @-}
{-@ LIQUID "--no-termination" @-}
-- | Description of database records.
module Model
  ( User, UserId
  , EntityField(..)
  , Projectable(..)
  ) where

import Database.Persist hiding (entityKey, entityVal)
import Database.Persist.TH
import Database.Persist.Sqlite hiding (entityKey, entityVal)

{-@ reflect entityKey @-}
entityKey :: Entity record -> Key record
entityKey (Entity k _) = k

{-@ reflect entityVal @-}
entityVal :: Entity record -> record
entityVal (Entity _ v) = v

{-@
data User = User
  { userName :: String
  , userFriend :: UserId
  , userSsn :: Int
  }
@-}

{-@
data EntityField User field <q :: Entity User -> Entity User -> Bool> where
  UserId :: EntityField <{\row v -> True}> User UserId
| UserName :: EntityField <{\row v -> entityKey v = userFriend (entityVal row)}> User String
| UserFriend :: EntityField <{\row v -> entityKey v = userFriend (entityVal row)}> User UserId
| UserSsn :: EntityField <{\row v -> entityKey v = entityKey row}> User Int
@-}
{-@ data variance EntityField covariant covariant contravariant @-}

-- Everything past this point should be generated by TH:

mkPersist sqlSettings [persistLowerCase|
User
  name String
  friend UserId
  ssn Int
  deriving Show
|]

class PersistEntity a => Projectable a where
  project :: EntityField a field -> Entity a -> field

instance Projectable User where
  project UserId = entityKey
  project UserName = userName . entityVal
  project UserFriend = userFriend . entityVal
  project UserSsn = userSsn . entityVal
